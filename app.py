from flask import Flask, render_template, request, jsonify
from sheets_manager import GoogleSheetsManager 
from dotenv import load_dotenv
from datetime import datetime
import os
import openai

app = Flask(__name__)
sheets_manager = GoogleSheetsManager()

load_dotenv()

QUIZ_CONTEXT = """
Voc√™ √© um chatbot especializado em aplicar o assesment sobre DISC, para medir o n√≠vel cognitivo de conhecimento dos participantes de um workshop. Siga rigorosamente estas instru√ß√µes:

ESTRUTURA DA CONVERSA:

1. BOAS-VINDAS (Sempre comece com):
Ol√°! üëã Ol√°, a partir de agora, voc√™ responder√° a algumas quest√µes para analisar o ponto de partida da sua evolu√ß√£o sobre o tema Autoconhecimento.

2. EXPLICA√á√ÉO DO ASSESSMENT:
O tempo m√©dio de resposta deste teste √© de 4 minutos.

Lembre-se: voc√™ n√£o precisa se preocupar ao responder essas quest√µes, afinal, voc√™ n√£o tem qualquer obriga√ß√£o de conhecer este assunto.

Suas respostas nos ajudar√° a construir um material de apoio mais alinhado √†s necessidades do grupo e te mostrar√°, ao final do programa, o quanto voc√™ aprendeu sobre esse tema.

3. INSTRU√á√ïES DE RESPOSTA:
Antes de come√ßarmos, algumas instru√ß√µes importantes:

- Voc√™ encontrar√° quest√µes de m√∫ltipla escolha e escolha √∫nica
- Para responder, use as letras correspondentes √†s op√ß√µes
- Em quest√µes de m√∫ltipla escolha, separe suas respostas com v√≠rgula (exemplo: a,b,c)
- Em quest√µes de escolha √∫nica, use apenas uma letra (exemplo: a)

4. CONFIRMA√á√ÉO PARA IN√çCIO:
Est√° pronto para come√ßar? Responda "sim" ou "n√£o".üòä

[Esperar resposta do usu√°rio]

5. FORMATO DAS QUEST√ïES:
[M√öLTIPLA ESCOLHA ‚ú®] ou [ESCOLHA √öNICA ‚≠ê]

[Contextualiza√ß√£o da pergunta]

a) Primeira op√ß√£o
b) Segunda op√ß√£o
[...]

QUESTION√ÅRIO:

1. Os profissionais que mais crescem profissionalmente s√£o aqueles que conhecem suas caracter√≠sticas individuais e tomam decis√µes pautadas em suas regras internas. Atualmente, √©/s√£o considerado(s) teste(s) relevante(s) para o autoconhecimento:

a) DISC
b) BigFive
c) MBTI
d) Valores Motivacionais
e) Nenhuma das anteriores

Escolha quantas op√ß√µes voc√™ julgar como correta. Ao responder, separe a(s) alternativa(s) por v√≠rgula.

2. Ao dominar a metodologia DISC, o profissional √© capaz de se destacar em:

a) Comunica√ß√£o e Gest√£o de Conflitos 
b) Intelig√™ncia Emocional 
c) Lideran√ßa e trabalho em equipe 
d) Produtividade e autoconfian√ßa 
e) Vendas e Atendimento ao Cliente

Escolha quantas op√ß√µes voc√™ julgar como correta. Ao responder, separe a(s) alternativa(s) por v√≠rgula.

3. O DISC √© uma metodologia que ajuda o profissional a identificar:

a) Seus pontos fortes e pontos de fragilidade de comportamento 
b) Seu estilo de comunica√ß√£o e o estilo de comunica√ß√£o das outras pessoas
c) Ajuda o l√≠der a escolher a melhor forma de delegar tarefas para os diferentes liderados da equipe 
d) O n√≠vel de motiva√ß√£o das outras pessoas na realiza√ß√£o de atividades do dia a dia
e) O n√≠vel de motiva√ß√£o pessoal para diferentes tipos de atividades

Escolha quantas op√ß√µes voc√™ julgar como correta. Ao responder, separe a(s) alternativa(s) por v√≠rgula.

4. Sobre lideran√ßa: dominar o DISC pode fazer com que o l√≠der diminua em at√© 80% os conflitos internos com seus liderados, uma vez que a metodologia permite que o l√≠der adapte seu estilo conforme as necessidades dos membros da equipe.

a) Verdadeiro
b) Falso

5. Sobre o padr√£o de perfil comportamental, quando uma pessoa passa muito tempo desempenhando atividades incoerentes ao perfil dela:

a) Se a adapta√ß√£o do perfil for inconsciente, ele poder√° apresentar queda de performance
b) Se a adapta√ß√£o do perfil for consciente e pontual, a performance do profissional n√£o ser√° prejudicada
c) O profissional nunca demonstrar√° excepcionalidade no desempenho dessas atividades
d) O profissional demorar√° muito mais tempo para realizar as atividades de maneira eficaz e ter√° um desgaste f√≠sico e mental muito maior
e) Ap√≥s tr√™s anos, ele assumir√° um novo perfil comportamental natural

Escolha quantas op√ß√µes voc√™ julgar como correta. Ao responder, separe a(s) alternativa(s) por v√≠rgula.

CONCLUS√ÉO:

Ao final do teste, voc√™ deve apenas enviar uma mensagem de agradecimento para o usu√°rio.
"""
import openai
openai.api_key = os.getenv('OPENAI_API_KEY')

def get_gpt_response(prompt, conversation_history):
    try:                        
        response = openai.ChatCompletion.create(
            model="gpt-4o-mini",           
            messages=[
                {"role": "system", "content": QUIZ_CONTEXT},
                *conversation_history,
                {"role": "user", "content": prompt}
            ]
        )
        return response.choices[0].message['content']
    except Exception as e:
        return f"Erro ao processar resposta: {str(e)}"
    

def calculate_scores(responses):
   print("\nCalculando pontua√ß√µes para as respostas:", responses)
   
   scores = {}
   
   question_scores = {
       '1': {'a': 1.25, 'b': 1.25, 'c': 1.25, 'd': 1.25, 'e': 0},
       '2': {'a': 1.0, 'b': 1.0, 'c': 1.0, 'd': 1.0, 'e': 1.0},
       '3': {'a': 2.0, 'b': 2.0, 'c': 1.0, 'd': -2.0, 'e': -2.0},
       '4': {'a': 5.0, 'b': 0},
       '5': {'a': 0, 'b': 1.0, 'c': 1.0, 'd': 3.0, 'e': 0}
   }
   
   for question_id, answers in responses.items():
       print(f"\nProcessando quest√£o {question_id}")
       print(f"Respostas para esta quest√£o: {answers}")
       
       scores[question_id] = 0
       for answer in answers:
           answer = answer.lower().strip()
           if answer in question_scores.get(str(question_id), {}):
               score = question_scores[str(question_id)][answer]
               scores[question_id] += score
               print(f"Resposta '{answer}' vale {score} pontos")
           else:
               print(f"Resposta '{answer}' n√£o encontrada na tabela de pontua√ß√£o")
   
   print("\nPontua√ß√µes finais:", scores)
   return scores

@app.route('/')
def welcome():
   return render_template('welcome.html')

@app.route('/quiz')
def quiz():
   return render_template('index.html')

@app.route('/chat', methods=['POST'])
def chat():
   try:
       data = request.json
       user_message = data.get('message', '')
       session = data.get('session', {})
       user_data = data.get('user_data', {})
       
       print("\nMensagem recebida:", user_message)
       print("Sess√£o atual:", session)
       
       conversation_history = session.get('conversation_history', [])
       conversation_history.append({"role": "user", "content": user_message})
       
       if "come√ßar o teste" in user_message.lower() or "sim" in user_message.lower():
           session = {
               'current_question': 0,
               'responses': {},
               'scores': {},
               'conversation_history': conversation_history
           }
       elif any(letter in user_message.lower() for letter in ['a', 'b', 'c', 'd', 'e']):
           if session.get('current_question', 0) == 0:
               session['current_question'] = 1
           
           current_question = str(session.get('current_question', 1))
           answers = [ans.strip().lower() for ans in user_message.split(',')]
           responses = session.get('responses', {})
           responses[current_question] = answers
           session['responses'] = responses
           
           print(f"Quest√£o {current_question} - Respostas:", answers)
           
           scores = calculate_scores(responses)
           session['scores'] = scores
           print("Pontua√ß√µes atualizadas:", scores)
           
           if session.get('current_question') == 5:
               print("\nTeste finalizado!")
               print("Respostas finais:", responses)
               print("Pontua√ß√µes finais:", scores)
               try:
                   sheets_manager.save_response(user_data, responses, scores)
                   print("Dados salvos com sucesso na planilha!")
               except Exception as e:
                   print(f"Erro ao salvar na planilha: {str(e)}")
           else:
               session['current_question'] = session.get('current_question', 1) + 1
       
       bot_response = get_gpt_response(user_message, conversation_history)
       conversation_history.append({"role": "assistant", "content": bot_response})
       session['conversation_history'] = conversation_history
       
       return jsonify({
           'response': bot_response,
           'session': session
       })
       
   except Exception as e:
       print(f"Erro na rota chat: {str(e)}")
       return jsonify({
           'error': str(e),
           'message': 'Ocorreu um erro no processamento'
       }), 500

if __name__ == '__main__':
   app.run(host='0.0.0.0', port=10000)